#!/usr/bin/env php
<?php

require_once __DIR__ . '/../vendor/autoload.php';

$urls = [];
$dest = null;
$baseHref = '/';
for ($i = 1; $i < $argc; $i += 1) {
    $opt = $argv[$i];
    switch ($opt) {
        case '--base-href': {
            $i += 1;
            $baseHref = $argv[$i];
            continue;
        }
        case '--dest': {
            $i += 1;
            $dest = $argv[$i];
            continue;
        }
        default: {
            $urls[] = $opt;
            continue;
        }
    }
}

if (!$dest || empty($urls)) {
    echo 'Please provide an XMI file to parse and an output dir';
    exit(1);
}

// Check destination dir existence
$dest = realpath($dest);
if (!$dest) {
    echo 'Output dir does not exist';
    exit(2);
}

// Set up twig environment
$loader = new \Twig_Loader_Filesystem(__DIR__ . '/../views');
$twig = new \Twig_Environment($loader/*, ['cache' => __DIR__ . '/../var']*/);

$parser = new \Moellers\XmiDoc\Loader();
foreach ($urls as $url) {
    echo 'Loading ' . $url . PHP_EOL;
    $parser->loadXmi($url);
}


$global = $parser->getGlobal();
$models = $parser->flattenModels();



// Set base href
$global->metadata['baseHref'] = $baseHref;

$ids = array_combine(array_map(function (\Moellers\XmiDoc\Model $m) {
    return $m->href;
}, $models), $models);

foreach ($models as $model) {
    // Resolve specializations
    foreach ($model->generalizations as $id => $g) {
        $ids[$g->href]->specializations[] = $model;
    }
}

$renderer = new \Moellers\XmiDoc\Renderer($twig, $dest);
$renderer->copyAssets(__DIR__ . '/../public');
$renderer->renderGlobal($global);
$renderer->renderElements($models, $global->metadata);
$renderer->renderIds($ids, $global->metadata);
